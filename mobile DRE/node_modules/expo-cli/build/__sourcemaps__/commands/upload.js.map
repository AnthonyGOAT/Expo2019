{"version":3,"sources":["commands/upload.js"],"names":["command","args","pick","COMMON_OPTIONS","size","Error","ensureOptionsAreValid","ANDROID_OPTIONS","androidCommand","program","alias","setCommonOptions","option","description","asyncActionProjectDir","createUploadAction","IOS_OPTIONS","iosCommand","on","console","log","join","fileExtension","UploaderClass","optionKeys","projectDir","ensurePlatformIsSupported","options","validateOptions","uploader","upload","error","process","platform","exit"],"mappings":"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","file":"../../commands/upload.js","sourcesContent":["import _ from 'lodash';\n\nimport IOSUploader, { LANGUAGES } from './upload/IOSUploader';\nimport AndroidUploader from './upload/AndroidUploader';\nimport log from '../log';\n\nconst COMMON_OPTIONS = ['id', 'latest', 'path'];\n\nexport default program => {\n  const ANDROID_OPTIONS = [...COMMON_OPTIONS, 'key', 'track'];\n  const androidCommand = program.command('upload:android [projectDir]').alias('ua');\n  setCommonOptions(androidCommand, '.apk');\n  androidCommand\n    .option('--key <key>', 'path to the JSON key used to authenticate with Google Play')\n    .option(\n      '--track <track>',\n      'the track of the application to use, choose from: production, beta, alpha, internal, rollout',\n      /^(production|beta|alpha|internal|rollout)$/i,\n      'internal'\n    )\n    .description(\n      'Uploads a standalone Android app to Google Play (works on macOS only). Uploads the latest build by default.'\n    )\n    .asyncActionProjectDir(createUploadAction(AndroidUploader, ANDROID_OPTIONS));\n\n  const IOS_OPTIONS = [\n    ...COMMON_OPTIONS,\n    'appleId',\n    'appleIdPassword',\n    'appName',\n    'sku',\n    'language',\n  ];\n  const iosCommand = program.command('upload:ios [projectDir]').alias('ui');\n  setCommonOptions(iosCommand, '.ipa');\n  iosCommand\n    .option(\n      '--apple-id <apple-id>',\n      'your Apple ID username (you can also set EXPO_APPLE_ID env variable)'\n    )\n    .option(\n      '--apple-id-password <apple-id-password>',\n      'your Apple ID password (you can also set EXPO_APPLE_ID_PASSWORD env variable)'\n    )\n    .option(\n      '--app-name <app-name>',\n      `the name of your app as it will appear on the App Store, this can't be longer than 30 characters (default: expo.name from app.json)`\n    )\n    .option(\n      '--sku <sku>',\n      'a unique ID for your app that is not visible on the App Store, will be generated unless provided'\n    )\n    .option(\n      '--language <language>',\n      `primary language (e.g. English, German; run \\`expo upload:ios --help\\` to see the list of available languages)`,\n      'English'\n    )\n    .description(\n      'Uploads a standalone app to Apple TestFlight (works on macOS only). Uploads the latest build by default.'\n    )\n    .on('--help', function() {\n      console.log('Available languages:');\n      console.log(`  ${LANGUAGES.join(', ')}`);\n      console.log();\n    })\n    .asyncActionProjectDir(createUploadAction(IOSUploader, IOS_OPTIONS));\n};\n\nfunction setCommonOptions(command, fileExtension) {\n  command\n    .option('--latest', 'uploads the latest build (default)')\n    .option('--id <id>', 'id of the build to upload')\n    .option('--path <path>', `path to the ${fileExtension} file`);\n}\n\nfunction createUploadAction(UploaderClass, optionKeys) {\n  return async (projectDir, command) => {\n    try {\n      ensurePlatformIsSupported();\n      await ensureOptionsAreValid(command);\n\n      const options = _.pick(command, optionKeys);\n      if (UploaderClass.validateOptions) {\n        UploaderClass.validateOptions(options);\n      }\n      const uploader = new UploaderClass(projectDir, options);\n      await uploader.upload();\n    } catch (err) {\n      log.error('Failed to upload the standalone app to the app store.');\n      throw err;\n    }\n  };\n}\n\nfunction ensurePlatformIsSupported() {\n  if (process.platform !== 'darwin') {\n    log.error('Unsupported platform! This feature works on macOS only.');\n    process.exit(1);\n  }\n}\n\nasync function ensureOptionsAreValid(command) {\n  const args = _.pick(command, COMMON_OPTIONS);\n  if (_.size(args) > 1) {\n    throw new Error(`You have to choose only one of --path, --id or --latest parameters`);\n  }\n}\n"],"sourceRoot":"/expo-cli@2.4.0/src"}