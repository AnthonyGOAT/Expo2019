{"version":3,"sources":["commands/upload/utils.js"],"names":["url","dest","get","responseType","response","fileSize","Number","headers","bar","complete","incomplete","total","data","pipe","createWriteStream","resolve","reject","on","tick","length","downloadFile","program","args","appleId","appleIdPassword","pipeToLogger","spawnAsyncThrowError","stdout","stdio","env","process","FASTLANE_USER","FASTLANE_PASSWORD","FASTLANE_DONT_STORE_PASSWORD","stderr","res","JSON","parse","result","message","reason","Error","runFastlaneAsync"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4IAQO,iBAA4BA,GAA5B,EAAiCC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkB,kCAAMC,GAAN,CAAUF,GAAV,EAAe,EAAEG,cAAc,QAAhB,EAAf,CADlB;;AAAA;AACCC,oBADD;AAECC,oBAFD,GAEYC,OAAOF,SAASG,OAAT,CAAiB,gBAAjB,CAAP,CAFZ;AAGCC,eAHD,GAGO,4CAAgB,mCAAhB,EAAqD;AAC/DC,wBAAU,GADqD;AAE/DC,0BAAY,GAFmD;AAG/DC,qBAAON;AAHwD,aAArD,CAHP;;AAQLD,qBAASQ,IAAT,CAAcC,IAAd,CAAmB,sCAAGC,iBAAH,CAAqBb,IAArB,CAAnB;AARK,6CASE,0CAAY,UAACc,OAAD,EAAUC,MAAV,EAAqB;AACtCZ,uBAASQ,IAAT,CAAcK,EAAd,CAAiB,MAAjB,EAAyB;AAAA,uBAAQT,IAAIU,IAAJ,CAASN,KAAKO,MAAd,CAAR;AAAA,eAAzB;AACAf,uBAASQ,IAAT,CAAcK,EAAd,CAAiB,KAAjB,EAAwB;AAAA,uBAAMF,QAAQd,IAAR,CAAN;AAAA,eAAxB;AACAG,uBAASQ,IAAT,CAAcK,EAAd,CAAiB,OAAjB,EAA0BD,MAA1B;AACD,aAJM,CATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeI,Y;;;;;;6IAgBf,kBACLC,OADK,EAELC,IAFK;AAAA,QAGHC,OAHG,SAGHA,OAHG;AAAA,QAGMC,eAHN,SAGMA,eAHN;AAAA,QAILC,YAJK,uEAIU,KAJV;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAMoBC,qBAAqBL,OAArB,EAA8BC,IAA9B,kDACnBG,eAAe,EAAEA,cAAc,EAAEE,QAAQ,CAAV,EAAhB,EAAf,GAAiD,EAAEC,OAAO,MAAT,EAD9B;AAEvBC,mEACKC,QAAQD,GADb,EAEMN,WACFC,eADE,IACiB;AACjBO,+BAAeR,OADE;AAEjBS,mCAAmBR,eAFF;AAGjBS,8CAA8B;AAHb,eAHvB;AAFuB,eANpB;;AAAA;AAAA;AAMGC,kBANH,SAMGA,MANH;AAmBCC,eAnBD,GAmBOC,KAAKC,KAAL,CAAWH,MAAX,CAnBP;;AAAA,kBAoBDC,IAAIG,MAAJ,KAAe,SApBd;AAAA;AAAA;AAAA;;AAAA,8CAqBIH,GArBJ;;AAAA;AAuBGI,mBAvBH,GAwBDJ,IAAIK,MAAJ,KAAe,gBAAf,GACIL,IAAIK,MADR,GAEI,oCAAEtC,GAAF,CAAMiC,GAAN,EAAW,iBAAX,EAA8B,qCAA9B,CA1BH;AAAA,kBA2BG,IAAIM,KAAJ,CAAUF,OAAV,CA3BH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeG,gB;;;;;;;AAxBtB;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;IAEQhB,oB,uCAAAA,oB","file":"../../../commands/upload/utils.js","sourcesContent":["import { ExponentTools } from 'xdl';\nimport _ from 'lodash';\nimport fs from 'fs-extra';\nimport ProgressBar from 'progress';\nimport axios from 'axios';\n\nconst { spawnAsyncThrowError } = ExponentTools;\n\nexport async function downloadFile(url, dest) {\n  const response = await axios.get(url, { responseType: 'stream' });\n  const fileSize = Number(response.headers['content-length']);\n  const bar = new ProgressBar('Downloading [:bar] :percent :etas', {\n    complete: '=',\n    incomplete: ' ',\n    total: fileSize,\n  });\n  response.data.pipe(fs.createWriteStream(dest));\n  return new Promise((resolve, reject) => {\n    response.data.on('data', data => bar.tick(data.length));\n    response.data.on('end', () => resolve(dest));\n    response.data.on('error', reject);\n  });\n}\n\nexport async function runFastlaneAsync(\n  program,\n  args,\n  { appleId, appleIdPassword },\n  pipeToLogger = false\n) {\n  const { stderr } = await spawnAsyncThrowError(program, args, {\n    ...(pipeToLogger ? { pipeToLogger: { stdout: 1 } } : { stdio: 'pipe' }),\n    env: {\n      ...process.env,\n      ...(appleId &&\n        appleIdPassword && {\n          FASTLANE_USER: appleId,\n          FASTLANE_PASSWORD: appleIdPassword,\n          FASTLANE_DONT_STORE_PASSWORD: '1',\n        }),\n    },\n  });\n\n  const res = JSON.parse(stderr);\n  if (res.result !== 'failure') {\n    return res;\n  } else {\n    const message =\n      res.reason !== 'Unknown reason'\n        ? res.reason\n        : _.get(res, 'rawDump.message', 'Unknown error when running fastlane');\n    throw new Error(message);\n  }\n}\n"],"sourceRoot":"/expo-cli@2.4.0/src"}