{"version":3,"sources":["commands/upload/BaseUploader.js"],"names":["BaseUploader","platform","projectDir","options","fastlane","require","_getProjectConfig","_getBinaryFilePath","buildPath","_getPlatformSpecificOptions","platformData","_uploadToTheStore","_removeBuildFileIfDownloaded","underline","readConfigJsonAsync","exp","Error","_ensureExperienceIsValid","_exp","path","id","_downloadBuildById","_downloadLastestBuild","slug","getStandaloneBuilds","build","_downloadBuild","artifacts","url","limit","urlOrPath","filename","basename","destinationPath","exists","startsWith","copy","remove"],"mappings":"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","file":"../../../commands/upload/BaseUploader.js","sourcesContent":["import path from 'path';\n\nimport fs from 'fs-extra';\nimport { StandaloneBuild, ProjectUtils } from 'xdl';\nimport chalk from 'chalk';\n\nimport { downloadFile } from './utils';\nimport log from '../../log';\n\nexport default class BaseUploader {\n  constructor(platform, projectDir, options) {\n    this.platform = platform;\n    this.projectDir = projectDir;\n    this.options = options;\n\n    // it has to happen in constructor because we don't want to load this module on a different platform than darwin\n    this.fastlane = require('@expo/traveling-fastlane-darwin')();\n  }\n\n  async upload() {\n    await this._getProjectConfig();\n    const buildPath = await this._getBinaryFilePath();\n    const platformData = await this._getPlatformSpecificOptions();\n    await this._uploadToTheStore(platformData, buildPath);\n    await this._removeBuildFileIfDownloaded(buildPath);\n    log(\n      `Please also see our docs (${chalk.underline(\n        'https://docs.expo.io/versions/latest/distribution/uploading-apps'\n      )}) to learn more about the upload process.`\n    );\n  }\n\n  async _getProjectConfig() {\n    const { exp } = await ProjectUtils.readConfigJsonAsync(this.projectDir);\n    if (!exp) {\n      throw new Error(`Couldn't read project config file in ${this.projectDir}.`);\n    }\n    this._ensureExperienceIsValid(exp);\n    this._exp = exp;\n  }\n\n  async _getBinaryFilePath() {\n    const { path, id } = this.options;\n    if (path) {\n      return path;\n    } else if (id) {\n      return this._downloadBuildById(id);\n    } else {\n      return this._downloadLastestBuild();\n    }\n  }\n\n  async _downloadBuildById(id) {\n    const { platform } = this;\n    const { slug } = this._exp;\n    const build = await StandaloneBuild.getStandaloneBuilds({ id, slug, platform });\n    if (!build) {\n      throw new Error(`We couldn't find build with id ${id}`);\n    }\n    return this._downloadBuild(build.artifacts.url);\n  }\n\n  async _downloadLastestBuild() {\n    const { platform } = this;\n    const { slug } = this._exp;\n    const build = await StandaloneBuild.getStandaloneBuilds({\n      slug,\n      platform,\n      limit: 1,\n    });\n    if (!build) {\n      throw new Error(\n        `There are no builds on the Expo servers, please run 'expo build:${platform} first'`\n      );\n    }\n    return this._downloadBuild(build.artifacts.url);\n  }\n\n  async _downloadBuild(urlOrPath) {\n    const filename = path.basename(urlOrPath);\n    const destinationPath = `/tmp/${filename}`;\n    if (await fs.exists(destinationPath)) {\n      return destinationPath;\n    }\n    if (urlOrPath.startsWith('/')) {\n      await fs.copy(urlOrPath, destinationPath);\n      return destinationPath;\n    } else {\n      log(`Downloading build from ${urlOrPath}`);\n      return await downloadFile(urlOrPath, destinationPath);\n    }\n  }\n\n  async _removeBuildFileIfDownloaded(buildPath) {\n    if (!this.options.path) {\n      await fs.remove(buildPath);\n    }\n  }\n\n  _ensureExperienceIsValid() {\n    throw new Error('Not implemented');\n  }\n\n  _getPlatformSpecificOptions() {\n    throw new Error('Not implemented');\n  }\n\n  _uploadToTheStore(platformData, buildPath) {\n    throw new Error('Not implemented');\n  }\n}\n"],"sourceRoot":"/expo-cli@2.4.0/src"}