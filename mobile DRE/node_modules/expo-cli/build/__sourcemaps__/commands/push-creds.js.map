{"version":3,"sources":["commands/push-creds.js"],"names":["program","command","description","option","asyncActionProjectDir","projectDir","options","apiKey","length","Error","getPublishInfoAsync","remotePackageName","args","getCurrentUserAsync","user","apiClient","clientForUser","putAsync","fcmApiKey","getAsync","result","status","console","log","deleteAsync"],"mappings":"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","file":"../../commands/push-creds.js","sourcesContent":["/**\n * @flow\n */\n\nimport { ApiV2, Exp, User } from 'xdl';\n\nimport log from '../log';\n\nexport default (program: any) => {\n  program\n    .command('push:android:upload [project-dir]')\n    .description('Uploads a Firebase Cloud Messaging key for Android push notifications.')\n    .option('--api-key [api-key]', 'Server API key for FCM.')\n    .asyncActionProjectDir(async (projectDir, options) => {\n      if (!options.apiKey || options.apiKey.length === 0) {\n        throw new Error('Must specify an API key to upload with --api-key.');\n      }\n\n      log('Reading project configuration...');\n\n      const {\n        args: { remotePackageName },\n      } = await Exp.getPublishInfoAsync(projectDir);\n\n      log('Logging in...');\n\n      let user = await User.getCurrentUserAsync();\n      let apiClient = ApiV2.clientForUser(user);\n\n      log(\"Setting API key on Expo's servers...\");\n\n      await apiClient.putAsync(`credentials/push/android/${remotePackageName}`, {\n        fcmApiKey: options.apiKey,\n      });\n\n      log('All done!');\n    }, true);\n\n  program\n    .command('push:android:show [project-dir]')\n    .description('Print the value currently in use for FCM notifications for this project.')\n    .asyncActionProjectDir(async (projectDir, options) => {\n      const {\n        args: { remotePackageName },\n      } = await Exp.getPublishInfoAsync(projectDir);\n      let user = await User.getCurrentUserAsync();\n      let apiClient = ApiV2.clientForUser(user);\n\n      let result = await apiClient.getAsync(`credentials/push/android/${remotePackageName}`);\n\n      if (result.status === 'ok' && result.fcmApiKey) {\n        console.log(JSON.stringify(result));\n      } else {\n        throw new Error('Server returned an invalid result!');\n      }\n    }, true);\n\n  program\n    .command('push:android:clear [project-dir]')\n    .description('Deletes a previously uploaded FCM credential.')\n    .asyncActionProjectDir(async (projectDir, options) => {\n      log('Reading project configuration...');\n      const {\n        args: { remotePackageName },\n      } = await Exp.getPublishInfoAsync(projectDir);\n\n      log('Logging in...');\n      let user = await User.getCurrentUserAsync();\n      let apiClient = ApiV2.clientForUser(user);\n\n      log(\"Deleting API key from Expo's servers...\");\n\n      await apiClient.deleteAsync(`credentials/push/android/${remotePackageName}`);\n\n      log('All done!');\n    }, true);\n};\n"],"sourceRoot":"/expo-cli@2.4.0/src"}